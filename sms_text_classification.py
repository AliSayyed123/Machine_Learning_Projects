# -*- coding: utf-8 -*-
"""sms_text_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iHuBuY1vckMs0DodiyKbwhT3EEEqoqhi
"""

!pip install tensorflow

import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

train_data =pd.DataFrame(pd.read_csv(train_file_path,sep='\t',header=None,names=['label','message']))
test_data=pd.DataFrame(pd.read_csv(test_file_path , sep='\t',header=None,names=['label','message']))
train_data.head()
#test_data.head()

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder

## Labelling Ham as 0 and Spam as 1
label_encoder = LabelEncoder()
train_labels = label_encoder.fit_transform(train_data['label'])
test_labels= label_encoder.transform(test_data['label'])
##Creating a pipeline
model = Pipeline([
    ('tfidf',TfidfVectorizer(stop_words='english', lowercase=True, ngram_range= (1,2), min_df=2, max_df=0.9)),
    ('clf', LogisticRegression(solver = 'liblinear',random_state=42,class_weight='balanced'))

])

##Training the model
model.fit(train_data['message'],train_labels)

# function to predict messages based on model
# (should return list containing prediction and label, ex. [0.008318834938108921, 'ham'])
def predict_message(pred_text):
  prob_spam =model.predict_proba([pred_text])[0][1]
  label ='spam' if prob_spam> 0.5 else 'ham'
  prediction = [round(prob_spam, 4 ), label]



  return (prediction)

pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()